// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Neccessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    role          Role      @default(value: USER)
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    websites      Website[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Visit {
    id         String    @id @default(cuid())
    url        String
    path       String
    websiteId  String
    website    Website   @relation(fields: [websiteId], references: [id], onDelete: Cascade)
    referrerId String?
    referrer   Referrer? @relation(fields: [referrerId], references: [id], onDelete: Cascade)
    os         String?
    browser    String?
    visitedAt  DateTime  @default(now())
}

model Website {
    id      String  @id @default(cuid())
    ownerId String
    owner   User    @relation(fields: [ownerId], references: [id])
    domain  String  @unique
    visits  Visit[]
}

model Referrer {
    id        String   @id @default(cuid())
    title     String
    domain    String   @unique
    icon      String?
    updatedAt DateTime @default(now())
    visits    Visit[]
}

enum Role {
    ADMIN
    USER
}
